@page "/d/{Slug}"
@using flashcard.Data
@layout Layout.DetailLayout
@using flashcard.Components.Components
@inject FlashCardService FlashCardService
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@deckData?.Title</PageTitle>

<div>
	<div class="border-b border-gray-600">
		<div class="flex h-[4.6rem] items-center flex-nowrap px-2 ">
			<div class="hidden sm:block absolute ">
				<a href="/" class="text-lg font-bold">
					<div class="flex gap-1 items-center">
						<img src="/svg/logo.svg" alt="logo MindFlick" class="h-14"/>
						MindFlick
					</div>
				</a>
			</div>
			<div class="flex-grow flex-row items-center text-center">
				<div>
					<span class="text-lg font-semibold">@deckData?.Title (@deckData?.Category)</span>
				</div>
				<div>
					<span
						class="text-lg font-semibold">@CurrentProgress</span>
				</div>
			</div>
		</div>
	</div>
	<div class="mx-auto max-w-7xl h-[calc(100vh-5rem)]  rounded-md">
		@if (!IsStart)
		{
			<div class="flex flex-col gap-5 h-full p-[2rem] mx-auto max-w-5xl">
				<div class="flex flex-col h-screen bg-secondary p-10">
					<div class="flex flex-col items-center justify-center flex-grow">
						<p class="text-3xl text-center">
							@deckData?.Title
						</p>
						<p class="text-lg line-clamp-6 text-center mt-2">
							@deckData?.Description
						</p>
					</div>
					<div class="flex flex-col items-center gap-3">
						<button class="btn btn-active w-full max-w-xl  rounded-md" @onclick=ToggleStart>Start</button>
						@if (canEdit)
						{
							<a href="/edit/@Slug" class="btn btn-active  w-full max-w-xl rounded-md">Edit</a>
						}

						@switch (isMarked)
						{
							case true:
								<button class="btn btn-active w-full max-w-xl rounded-md" @onclick=HandleDeckUnmark>
									Remove Deckmark
								</button>
								break;
							case false when isAuthenticated:
								<button class="btn btn-active w-full max-w-xl rounded-md" @onclick=HandleDeckMark>
									Set Deckmark
								</button>
								break;
						}
					</div>
				</div>
			</div>
		}
		@if (IsStart)
		{
			<div class="flex flex-col gap-5 h-full p-[2rem] mx-auto max-w-5xl">
				<div class="flipcard cursor-pointer w-full h-full ">
					<div class="flipcard-front bg-secondary">
						<article class="prose lg:prose-xl">
							<MarkdownRenderer Content="@soal[currentIndex].Question"/>
							@* @soal[currentIndex].Question *@
						</article>
					</div>
					<div class="flipcard-back bg-secondary">
						<article class="prose lg:prose-xl">
							<MarkdownRenderer Content="@soal[currentIndex].Answer"/>
							@* @soal[currentIndex].Answer *@
						</article>
					</div>
				</div>

				<div class="flex-none items-center h-14 ">
					<div class="flex justify-center gap-10  items-center h-full">
						<div class="probNavigate">
							<button class="btn btn-circle btn-outline" @onclick="HandlePrev"
							        disabled="@(!CanNavigatePrev)">
								<flashcard.Components.Icon.IconArrowLeft/>
							</button>
						</div>
						<div class="probNavigate">
							<button class="btn btn-circle btn-outline" @onclick="HandleNext"
							        disabled="@(!CanNavigateNext)">
								<flashcard.Components.Icon.IconArrowRight/>
							</button>
						</div>
					</div>
				</div>
			</div>

			<script>
				document.querySelectorAll('.flipcard').forEach(card => {
					card.addEventListener('click', function (e) {
						e.preventDefault();
						this.classList.toggle('flipped');
					});
				});
				document.querySelectorAll('.probNavigate').forEach(button => {
					button.addEventListener('click', function (e) {
						e.preventDefault();
						document.querySelectorAll('.flipcard').forEach(card => {
							card.classList.remove('flipped');
							card.style.transitionDuration = '0.1s';
						});
						setTimeout(() => {
							document.querySelectorAll('.flipcard').forEach(card => {
								card.style.transitionDuration = '1s';
							});
						}, 100);
					});
				});

			</script>
		}
	</div>
</div>